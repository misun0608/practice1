/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2019-12-02 10:54:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.spring.springboard.BoardVO;
import com.spring.springboard.BoardDAO;
import java.util.List;
import java.text.SimpleDateFormat;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/color.jsp", Long.valueOf(1575269005520L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.spring.springboard.BoardVO");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.spring.springboard.BoardDAO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	String bodyback_c= "#e0ffff";
	String back_c= "#8fbc8f";
	String title_c= "#5f9ea0";
	String value_c= "#b0e0e6";
	String bar= "#778899";

      out.write('	');
      out.write("\r\n");
      out.write("\r\n");

   int pageSize = 10;
   SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-d HH:mm");
   
   String pageNum = request.getParameter("pageNum");
   
   if(pageNum == null)	// 처음엔 null
      pageNum = "1";
   
   int currentPage = Integer.parseInt(pageNum);
   int startRow = (currentPage - 1) * pageSize + 1;
   int endRow = startRow + pageSize - 1;
   int count = 0;
   int number = 0;
   
   List articleList = null;
   BoardDAO dao = new BoardDAO();
   count = dao.getArticleCount();

   // 맨 마지막 페이지의 마지막 글을 삭제하여 마지막 페이지가 없어졌을 때 필요
   if(count < startRow) {
      currentPage = currentPage - 1;	// 페이지수 줄여줌
      startRow = (currentPage - 1) * pageSize + 1;	// 그리고 다시 startRow endRow 계산	/ 그 페이지에서 처음 시작되는 글의 번호
      endRow = startRow + pageSize - 1;	// 그 페이지의 마지막 글 번호
   }
   
   if(count > 0) 
      articleList = dao.getArticles(startRow, endRow);	// null 아니면 arrayList객체가 저장됨
   
   number = count - (currentPage - 1) * pageSize;	// 게시판상 번호와 실제 게시판 번호가 다를 수 있음(실제로 글을 쓰고 지우는 경우가 있기 때문에)

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body bgcolor = \"");
      out.print(bodyback_c);
      out.write("\">\r\n");
      out.write("   <center>\r\n");
      out.write("      <b>글 목록</b>\r\n");
      out.write("      <table width = \"600\">\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td align = \"right\" bgcolor = \"");
      out.print(value_c );
      out.write("\">\r\n");
      out.write("               <a href = \"writeform.bo\">글쓰기</a>\r\n");
      out.write("            </td>\r\n");
      out.write("         </tr>\r\n");
      out.write("      </table>\r\n");
      out.write("      \r\n");

   if(count == 0) {

      out.write("\r\n");
      out.write("      <table width = \"600\" border = \"1\"  cellpadding = \"0\" cellspacing = \"0\">\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td align = \"center\">게시판에 저장된 글이 없습니다. </td>\r\n");
      out.write("         </tr>\r\n");
      out.write("      </table>\r\n");
 
   } else {

      out.write("\r\n");
      out.write("   <table border = \"1\" width = \"600\" cellpadding = \"0\" cellspacing = \"0\" align = \"center\">\r\n");
      out.write("      <tr height = \"30\" bgcolor = \"");
      out.print(value_c );
      out.write("\">\r\n");
      out.write("         <td align = \"center\" width = \"50\"> 번 호 </td>\r\n");
      out.write("         <td align = \"center\" width = \"250\"> 제 목 </td>\r\n");
      out.write("         <td align = \"center\" width = \"100\"> 작 성 자 </td>\r\n");
      out.write("         <td align = \"center\" width = \"150\"> 작 성 일 </td>\r\n");
      out.write("         <td align = \"center\" width = \"50\"> 조 회 </td>\r\n");
      out.write("      </tr>\r\n");

      for(int i = 0; i < articleList.size(); i++) {
         BoardVO article = (BoardVO)articleList.get(i);	// (BoardDataBean) 캐스트 생략가능

      out.write("\r\n");
      out.write("      <tr height = \"30\">\r\n");
      out.write("         <td align = \"center\" width = \"50\"> ");
      out.print(number );
      out.write(" </td>\r\n");
      out.write("         <td width = \"250\">\r\n");
      out.write("            ");
 if(article.getRe_level() > 0) {	// getRe_level이 0보다 크면 들여쓰기
                  for(int level = 0; level < article.getRe_level(); level++) {
            
      out.write("\r\n");
      out.write("                     &nbsp;\r\n");
      out.write("            ");

                  }
            
      out.write("\r\n");
      out.write("               <img src=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/image/re.gif />\r\n");
      out.write("            ");
}else { 
      out.write("\r\n");
      out.write("                  &nbsp;\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("               <a href = \"content.bo?num=");
      out.print(article.getNum());
      out.write("&pageNum=");
      out.print(currentPage );
      out.write("&number=");
      out.print(number );
      out.write("\">\t<!-- 글에 대한 정보가 필요해서 파라미터들이 필요 / num = rownum / number = 게시판에 뜨는 글넘버-->\r\n");
      out.write("                  ");
      out.print(article.getSubject() );
      out.write("\r\n");
      out.write("               </a>\r\n");
      out.write("         ");

            if(article.getReadcount() >= 20) {
         
      out.write("\r\n");
      out.write("         \t\t<img src=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/image/hot.gif border=\"0\" height=\"16\"/>\r\n");
      out.write("         ");

            }
         
      out.write("\r\n");
      out.write("         </td>\r\n");
      out.write("         <td align = \"center\" width = \"100\">\r\n");
      out.write("            <a href = \"mailto:");
      out.print(article.getEmail());
      out.write('"');
      out.write('>');
      out.print(article.getWriter() );
      out.write("</a>\r\n");
      out.write("         </td>\r\n");
      out.write("         <td align = \"center\" width = \"150\">\r\n");
      out.write("            ");
      out.print(sdf.format(article.getReg_date()) );
      out.write("\r\n");
      out.write("         </td>\r\n");
      out.write("         \r\n");
      out.write("         <td align = \"center\" width = \"50\">\r\n");
      out.write("            ");
      out.print(article.getReadcount() );
      out.write("\r\n");
      out.write("         </td>\r\n");
      out.write("      </tr>\r\n");

      number--;
      }

      out.write("\r\n");
      out.write("   </table>\r\n");
      out.write("   <br>\r\n");
      out.write("\r\n");

   }

   if(count > 0) {
      int pageCount = ((count - 1) / pageSize) + 1;
      int startPage = 1;
      int i;
      
      if(currentPage % 10 != 0)
         startPage = (int)(currentPage/10) * 10 + 1;
      else 
         startPage = currentPage - 9; 
      
      int pageBlock = 10;	// 페이지 1~10 열개 단위로 하고 그 다음은 다음누르면 11~20 이런식
      
      if(startPage > 10) {	// 10보다 크면 이전블럭이 존재한다는 소리

      out.write("\r\n");
      out.write("         <a href = \"list.jsp?pageNum=");
      out.print(startPage -10);
      out.write("\">[이전]</a>\r\n");

      }
      
      for(i = startPage; (i <= startPage + 9) && (i <= pageCount); i++) {

      out.write("\r\n");
      out.write("         <a href = \"list.jsp?pageNum=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i);
      out.write("]</a>\r\n");
      }
      
      if(i < pageCount) {

      out.write("         \r\n");
      out.write("         <a href = \"list.jsp?pageNum=");
      out.print(startPage+10);
      out.write("\">[다음]</a>\r\n");

      }
   }

      out.write("\r\n");
      out.write("   </center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
