package com.spring.springboard;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

public class BoardDAO {
	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	// 게시판 글 개수 구하기
	public int getArticleCount() throws Exception {
		int count = 0;

		try {
			conn = JDBCUtil.getConnection();

			pstmt = conn.prepareStatement("select count(*) from board"); // count(*) : 행수를 구할 때 사용
			rs = pstmt.executeQuery();

			if (rs.next()) {
				count = rs.getInt(1);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			JDBCUtil.closeResource(rs, pstmt, conn);
		}
		return count;
	}

	// 게시판 글 리스트
	public ArrayList<BoardVO> getArticles(int start, int end) throws Exception {
		// int start, int end model로 받아야하나?
		ArrayList<BoardVO> articleList = null;
		String sql = null;

		try {
			conn = JDBCUtil.getConnection();
			sql = "select * from " + "(select rownum rnum, num, writer, passwd, subject, email, content, reg_date, "
					+ "readcount, ref, re_step, re_level from "
					+ "(select * from board order by ref desc, re_step asc)) " + "where rnum >= ? and rnum <= ?";

			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, start);
			pstmt.setInt(2, end);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				articleList = new ArrayList<BoardVO>();
				do {
					BoardVO article = new BoardVO(); // 글 하나를 저장하기 위한 객체
					article.setNum(rs.getInt("num"));
					article.setWriter(rs.getString("writer"));
					article.setPasswd(rs.getString("passwd"));
					article.setSubject(rs.getString("subject"));
					article.setEmail(rs.getString("email"));
					article.setContent(rs.getString("content"));
					article.setReg_date(rs.getTimestamp("reg_date"));
					article.setReadcount(rs.getInt("readcount"));
					article.setRef(rs.getInt("ref"));
					article.setRe_step(rs.getInt("re_step"));
					article.setRe_level(rs.getInt("re_level"));
					articleList.add(article);
				} while (rs.next());
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			JDBCUtil.closeResource(rs, pstmt, conn);
		}
		return articleList;
	}

	// 글쓰기
	public void insertArticle(BoardVO article) throws Exception {
		// 매개변수 다른거 쓸 수 있을거같은데...

		int num = article.getNum();
		int ref = article.getRef();
		int re_step = article.getRe_step();
		int re_level = article.getRe_level();
		int number = 0;
		
		String sql = "";
		
		try {
			conn = JDBCUtil.getConnection();
			
			pstmt = conn.prepareStatement("select max(num) from board");
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				number = rs.getInt(1) + 1;
			}else {
				number = 1; // 최초의 글쓰기
			}
			
			// 원글에 대한 답글 or 답글에 대한 답글쓰기
			if(num != 0) {
				sql = "update board set re_step = re_step +1 where ref = ? and re_step > ?";
				
			}
			
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			JDBCUtil.closeResource(rs, pstmt, conn);
		}
	}

	// 제목 클릭해서 글내용 들어갈때

	// 글 수정 폼에 뿌려줄 데이터

	// 글 수정

	// 글 삭제

}
